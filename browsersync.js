// Generated by LiveScript 1.4.0
(function(){
  var path, exec, browserSync, outputDir, cssOutputDir, jsOutputDir, reloadWatchFile, compileWatchFile, autoCompileFile, getTimeToken, getCompileCmdAndFileName, compileTask, compileCallback, wacher;
  path = require('path');
  exec = require('child_process').exec;
  browserSync = require('browser-sync').create();
  outputDir = 'html';
  cssOutputDir = outputDir + "/css";
  jsOutputDir = outputDir + "/js";
  reloadWatchFile = '';
  compileWatchFile = ["_source/jade/*.jade", "_source/sass/*.sass", "_source/live/*.ls"];
  autoCompileFile = true;
  getTimeToken = function(){
    var currDate, hours, minutes, seconds;
    currDate = new Date();
    hours = currDate.getHours();
    minutes = currDate.getMinutes();
    seconds = currDate.getSeconds();
    if (hours < 10) {
      hours = "0" + hours;
    }
    if (minutes < 10) {
      minutes = "0" + minutes;
    }
    if (seconds < 10) {
      seconds = "0" + seconds;
    }
    return hours + ":" + minutes + ":" + seconds;
  };
  getCompileCmdAndFileName = function(file, ext){
    var filename, compileFileName, cmd;
    filename = path.basename(file, ext);
    switch (ext) {
    case '.jade':
      compileFileName = outputDir + "/" + filename + ".html";
      cmd = "jade -Po " + outputDir + " " + file;
      break;
    case '.sass':
      compileFileName = cssOutputDir + "/" + filename + ".css";
      cmd = "sass --sourcemap=none --style compact " + file + "|sed '/^@charset/d'>" + compileFileName;
      break;
    case '.coffee':
      compileFileName = jsOutputDir + "/" + filename + ".js";
      cmd = "coffee --no-header -bco " + jsOutputDir + " " + file;
      break;
    case '.ls':
      compileFileName = jsOutputDir + "/" + filename + ".js";
      cmd = "lsc --no-header -bco " + jsOutputDir + " " + file;
      break;
    default:
      compileFileName = cmd = '';
    }
    return [cmd, compileFileName];
  };
  compileTask = function(file, ext, reload){
    var cmdIndex, ref$, cmd, filename, execCallback, execCmd;
    cmdIndex = -1;
    try {
      ref$ = getCompileCmdAndFileName(file, ext), cmd = ref$[0], filename = ref$[1];
    } catch (e$) {}
    if (!cmd || !filename) {
      console.log("cmd not define. file: " + file + " ext: " + ext);
    }
    execCallback = function(err, stdo, stde){
      if (err === null && !stde) {
        if (cmdIndex === -1) {
          console.log("[" + getTimeToken() + "] compiled " + filename);
          if (reload) {
            reload(filename);
          }
        } else {
          execCmd();
        }
      } else {
        console.log(err || stde);
      }
    };
    (execCmd = function(){
      var currCmd;
      if (Array.isArray(cmd)) {
        currCmd = cmd[++cmdIndex];
        if (cmd.length <= cmdIndex + 1) {
          cmdIndex = -1;
        }
      } else {
        currCmd = cmd;
      }
      if (currCmd) {
        exec(currCmd, execCallback);
      }
    })();
  };
  compileCallback = function(file){
    var ext, filename;
    ext = path.extname(file);
    filename = path.basename(file);
    if (filename.charAt(0) === '_') {
      return undefined;
    }
    switch (ext) {
    case '.jade':
    case '.coffee':
    case '.ls':
    case '.sass':
      compileTask(file, ext, browserSync.reload);
      break;
    default:
      console.log('unknown file type.');
    }
  };
  browserSync.init({
    server: {
      baseDir: outputDir,
      index: 'index.html'
    },
    open: false
  });
  if (reloadWatchFile && reloadWatchFile.length) {
    browserSync.watch(reloadWatchFile).on('change', browserSync.reload);
  }
  wacher = browserSync.watch(compileWatchFile).on('change', compileCallback);
  if (autoCompileFile) {
    wacher.on('add', compileCallback);
  }
}).call(this);
